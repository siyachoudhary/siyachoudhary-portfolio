{"ast":null,"code":"import * as G from './globals';\nimport { is } from './helpers';\nexport var createInterpolator = function (range, output, extrapolate) {\n  if (is.fun(range)) {\n    return range;\n  }\n  if (is.arr(range)) {\n    return createInterpolator({\n      range: range,\n      output: output,\n      extrapolate: extrapolate\n    });\n  }\n  if (is.str(range.output[0])) {\n    return G.createStringInterpolator(range);\n  }\n  var config = range;\n  var outputRange = config.output;\n  var inputRange = config.range || [0, 1];\n  var extrapolateLeft = config.extrapolateLeft || config.extrapolate || 'extend';\n  var extrapolateRight = config.extrapolateRight || config.extrapolate || 'extend';\n  var easing = config.easing || function (t) {\n    return t;\n  };\n  return function (input) {\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n  };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n  var result = map ? map(input) : input;\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result;else if (extrapolateLeft === 'clamp') result = inputMin;\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result;else if (extrapolateRight === 'clamp') result = inputMax;\n  }\n  if (outputMin === outputMax) return outputMin;\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n  // Input Range\n  if (inputMin === -Infinity) result = -result;else if (inputMax === Infinity) result = result - inputMin;else result = (result - inputMin) / (inputMax - inputMin);\n  // Easing\n  result = easing(result);\n  // Output Range\n  if (outputMin === -Infinity) result = -result;else if (outputMax === Infinity) result = result + outputMin;else result = result * (outputMax - outputMin) + outputMin;\n  return result;\n}\nfunction findRange(input, inputRange) {\n  for (var i = 1; i < inputRange.length - 1; ++i) if (inputRange[i] >= input) break;\n  return i - 1;\n}","map":{"version":3,"mappings":"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","names":["G","is","createInterpolator","range","output","extrapolate","fun","arr","str","createStringInterpolator","config","outputRange","inputRange","extrapolateLeft","extrapolateRight","easing","input","findRange","interpolate","map","inputMin","inputMax","outputMin","outputMax","result","Infinity","i","length"],"sources":["/Users/siya/Library/Mobile Documents/com~apple~CloudDocs/MobileApps/REACT/portfolio_page/node_modules/@react-spring/src/createInterpolator.ts"],"sourcesContent":["import * as G from './globals'\nimport { is } from './helpers'\nimport {\n  Animatable,\n  InterpolatorFn,\n  EasingFunction,\n  ExtrapolateType,\n  InterpolatorConfig,\n  InterpolatorFactory,\n} from './types'\n\nexport const createInterpolator: InterpolatorFactory = (\n  range: readonly number[] | InterpolatorFn<any, any> | InterpolatorConfig<any>,\n  output?: readonly Animatable[],\n  extrapolate?: ExtrapolateType\n) => {\n  if (is.fun(range)) {\n    return range\n  }\n\n  if (is.arr(range)) {\n    return createInterpolator({\n      range,\n      output: output!,\n      extrapolate,\n    })\n  }\n\n  if (is.str(range.output[0])) {\n    return G.createStringInterpolator(range as any) as any\n  }\n\n  const config = range as InterpolatorConfig<number>\n  const outputRange = config.output\n  const inputRange = config.range || [0, 1]\n\n  const extrapolateLeft =\n    config.extrapolateLeft || config.extrapolate || 'extend'\n  const extrapolateRight =\n    config.extrapolateRight || config.extrapolate || 'extend'\n  const easing = config.easing || (t => t)\n\n  return (input: number) => {\n    const range = findRange(input, inputRange)\n    return interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n      config.map\n    )\n  }\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: EasingFunction,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n  map?: (x: number) => number\n) {\n  let result = map ? map(input) : input\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') return result\n    else if (extrapolateLeft === 'clamp') result = inputMin\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') return result\n    else if (extrapolateRight === 'clamp') result = inputMax\n  }\n  if (outputMin === outputMax) return outputMin\n  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax\n  // Input Range\n  if (inputMin === -Infinity) result = -result\n  else if (inputMax === Infinity) result = result - inputMin\n  else result = (result - inputMin) / (inputMax - inputMin)\n  // Easing\n  result = easing(result)\n  // Output Range\n  if (outputMin === -Infinity) result = -result\n  else if (outputMax === Infinity) result = result + outputMin\n  else result = result * (outputMax - outputMin) + outputMin\n  return result\n}\n\nfunction findRange(input: number, inputRange: readonly number[]) {\n  for (var i = 1; i < inputRange.length - 1; ++i)\n    if (inputRange[i] >= input) break\n  return i - 1\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}