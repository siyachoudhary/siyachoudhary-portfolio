{"ast":null,"code":"import { useEffect, useRef, useState } from 'react';\nexport var useOnce = function (effect) {\n  return useEffect(effect, []);\n};\n/** Return a function that re-renders this component, if still mounted */\nexport var useForceUpdate = function () {\n  var update = useState(0)[1];\n  var unmounted = useRef(false);\n  useOnce(function () {\n    return function () {\n      unmounted.current = true;\n    };\n  });\n  return function () {\n    if (!unmounted.current) {\n      update({});\n    }\n  };\n};\n/** Use a value from the previous render */\nexport function usePrev(value) {\n  var prevRef = useRef(undefined);\n  useEffect(function () {\n    prevRef.current = value;\n  });\n  return prevRef.current;\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAKnD,OAAO,IAAMC,OAAO,GAAY,gBAAM;EAAI,gBAAS,CAACC,MAAM,EAAE,EAAE,CAAC;AAArB,CAAqB;AAE/D;AACA,OAAO,IAAMC,cAAc,GAAG;EAC5B,IAAMC,MAAM,GAAGJ,QAAQ,CAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAClC,IAAMK,SAAS,GAAGN,MAAM,CAAC,KAAK,CAAC;EAC/BE,OAAO,CAAC;IAAM;MACZI,SAAS,CAACC,OAAO,GAAG,IAAI;IAC1B,CAAC;EAFa,CAEb,CAAC;EACF,OAAO;IACL,IAAI,CAACD,SAAS,CAACC,OAAO,EAAE;MACtBF,MAAM,CAAC,EAAE,CAAC;;EAEd,CAAC;AACH,CAAC;AAED;AACA,OAAM,SAAUG,OAAO,CAAIC,KAAQ;EACjC,IAAMC,OAAO,GAAGV,MAAM,CAAMW,SAAS,CAAC;EACtCZ,SAAS,CAAC;IACRW,OAAO,CAACH,OAAO,GAAGE,KAAK;EACzB,CAAC,CAAC;EACF,OAAOC,OAAO,CAACH,OAAO;AACxB","names":["useEffect","useRef","useState","useOnce","effect","useForceUpdate","update","unmounted","current","usePrev","value","prevRef","undefined"],"sources":["/Users/siya/Library/Mobile Documents/com~apple~CloudDocs/MobileApps/REACT/portfolio_page/node_modules/@react-spring/src/hooks.ts"],"sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\n// Explicit type annotation fixes TS2742 error.\ntype UseOnce = (effect: React.EffectCallback) => void\n\nexport const useOnce: UseOnce = effect => useEffect(effect, [])\n\n/** Return a function that re-renders this component, if still mounted */\nexport const useForceUpdate = () => {\n  const update = useState<any>(0)[1]\n  const unmounted = useRef(false)\n  useOnce(() => () => {\n    unmounted.current = true\n  })\n  return () => {\n    if (!unmounted.current) {\n      update({})\n    }\n  }\n}\n\n/** Use a value from the previous render */\nexport function usePrev<T>(value: T): T | undefined {\n  const prevRef = useRef<any>(undefined)\n  useEffect(() => {\n    prevRef.current = value\n  })\n  return prevRef.current\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}